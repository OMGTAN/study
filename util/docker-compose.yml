# Use postgres/example user/password credentials
version: '3.8'

networks:
  zk-net:
    name: zk-net
  elasticsearch:
    name: elasticsearch

services:

  # postgres:
  #   image: postgres:15
  #   container_name: pg15
  #   # restart: always
  #   environment:
  #     POSTGRES_PASSWORD: 123456
  #     POSTGRES_DB: blog
  #     PGDATA: /var/lib/postgresql/data/pgdata #数据存储文件夹
  #   volumes:
  #     - D:/Job/docker/pg/data:/var/lib/postgresql/data/  #将数据映射到对应的路径
  #     # - D:/Job/docker/pg/etc/localtime:/etc/localtime:ro #将外边时间直接挂载到容器内部，权限只读
  #     # - D:/Job/docker/pg/etc/timezone:/etc/timezone:ro #将外面的时间挂载到容器内部，权限只读，容器内不可修改
  #   ports:
  #     - 5432:5432
    
  # mysql:
  #   image: mysql:8
  #   container_name: mysql8 
  #   # restart: always
  #   command:
  #   # MySQL8的密码验证方式默认是 caching_sha2_password，但是很多的连接工具还不支持该方式
  #   # 就需要手动设置下mysql的密码认证方式为以前的 mysql_native_password 方式
  #     --default-authentication-plugin=mysql_native_password
  #     --character-set-server=utf8mb4
  #   environment:
  #     - "MYSQL_ROOT_PASSWORD=123456" # root用户的密码
  #     - "MYSQL_USER=user" # 创建新用户
  #     - "MYSQL_PASSWORD=123456" # 新用户的密码
  #     - "MYSQL_DATABASE=blog"
  #     - "TZ=Asia/Shanghai"
  #   volumes:
  #     - D:/Job/docker/mysql/data:/var/lib/mysql
  #     - D:/Job/docker/mysql/conf:/etc/mysql/conf.d
  #     - D:/Job/docker/mysql/logs:/logs
  #   ports:
  #     - 3306:3306
    
  # redis:
  #   image: redis:7
  #   container_name: redis7
  #   # command: redis-server --requirepass yourpassword
  #   volumes:
  #     - D:/Job/docker/redis/data:/data 
  #     - D:/Job/docker/redis/config:/usr/local/etc/redis/ 
  #     - D:/Job/docker/redis/log:/logs 
  #   ports:
  #     - 6379:6379

  # zookeeper:
  #  image: zookeeper:3.8
  #  restart: always
  #  container_name: zookeeper
  #  volumes:
  #    - D:/Job/docker/zookeeper/zookeeper/config:/conf
  #    - D:/Job/docker/zookeeper/zookeeper/data:/data
  #    - D:/Job/docker/zookeeper/zookeeper/datalog:/datalog
  #  ports: 
  #    - 2181:2181
  #    - 8080:8080


  # zk1:
  #   # docker container所使用的docker image
  #   image: zookeeper:3.8
  #   hostname: zk1
  #   container_name: zk1
  #   # 配置docker container和宿主机的端口映射
  #   ports:
  #     - 2181:2181
  #     - 8081:8080
  #   # 配置docker container的环境变量
  #   environment:
  #     # 当前zk实例的id
  #     ZOO_MY_ID: 1
  #     # 整个zk集群的机器、端口列表
  #     ZOO_SERVERS: server.1=0.0.0.0:2888:3888;2181 server.2=zk2:2888:3888;2181 server.3=zk3:2888:3888;2181
  #   # 将docker container上的路径挂载到宿主机上 实现宿主机和docker container的数据共享
  #   volumes:
  #     - D:/Job/docker/zookeeper/zk1/data:/data
  #     - D:/Job/docker/zookeeper/zk1/datalog:/datalog
  #   # 当前docker container加入名为zk-net的隔离网络
  #   networks:
  #     - zk-net

  # zk2:
  #   image: zookeeper:3.8
  #   hostname: zk2
  #   container_name: zk2
  #   ports:
  #     - 2182:2181
  #     - 8082:8080
  #   environment:
  #     ZOO_MY_ID: 2
  #     ZOO_SERVERS: server.1=zk1:2888:3888;2181 server.2=0.0.0.0:2888:3888;2181 server.3=zk3:2888:3888;2181
  #   volumes:
  #     - D:/Job/docker/zookeeper/zk2/data:/data
  #     - D:/Job/docker/zookeeper/zk2/datalog:/datalog
  #   networks:
  #     - zk-net

  # zk3:
  #   image: zookeeper:3.8
  #   hostname: zk3
  #   container_name: zk3
  #   ports:
  #     - 2183:2181
  #     - 8083:8080
  #   environment:
  #     ZOO_MY_ID: 3
  #     ZOO_SERVERS: server.1=zk1:2888:3888;2181 server.2=zk2:2888:3888;2181 server.3=0.0.0.0:2888:3888;2181
  #   volumes:
  #     - D:/Job/docker/zookeeper/zk3/data:/data
  #     - D:/Job/docker/zookeeper/zk3/datalog:/datalog
  #   networks:
  #     - zk-net

  # elasticsearch:
  #   image: elasticsearch:8.6.1
  #   ports:
  #     - 9200:9200
  #     - 9300:9300
  #   container_name: elasticsearch
  #   environment:
  #     # 单节点     
  #     - discovery.type=single-node
  #     - "ES_JAVA_OPTS=-Xms1G -Xmx2G"
    
      